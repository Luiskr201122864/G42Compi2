/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaArbol = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,20],$V2=[1,5],$V3=[1,8],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,17],$Vc=[1,18],$Vd=[1,19],$Ve=[5,10,20,111,121,127,128,129,130,131,132,133,134,135,136],$Vf=[1,23],$Vg=[1,24],$Vh=[1,25],$Vi=[1,28],$Vj=[1,29],$Vk=[1,30],$Vl=[1,31],$Vm=[1,32],$Vn=[1,33],$Vo=[1,34],$Vp=[5,10,11,20,108,109,110,111,121,127,128,129,130,131,132,133,134,135,136],$Vq=[5,10,11,20,108,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],$Vr=[5,10,11,20,111,121,127,128,129,130,131,132,133,134,135,136],$Vs=[5,10,11,20,108,109,110,111,113,114,115,116,117,118,119,120,121,127,128,129,130,131,132,133,134,135,136],$Vt=[5,10,11,20,108,109,110,111,113,114,115,116,117,118,119,120,121,122,123,127,128,129,130,131,132,133,134,135,136],$Vu=[5,10,11,20,108,109,110,111,113,114,115,116,117,118,119,120,121,122,123,126,127,128,129,130,131,132,133,134,135,136],$Vv=[5,10,11,20,108,109,110,111,127,128,129,130,131,132,133,134,135,136];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"cuerpo":4,"EOF":5,"instrucciones":6,"expresionlog":7,"comentarios":8,"PRINT":9,"(":10,")":11,"PRINTLN":12,"tipoVariable":13,"DOUBLE":14,"INT":15,"STRING":16,"BOOLEAN":17,"CHAR":18,"declaracionVariable":19,"ID":20,"=":21,"declaracionVariable2":22,",":23,"lstID":24,"asignacionVariable":25,"declaracionArreglo":26,"arreglo":27,"[":28,"]":29,"copiarArreglo":30,"asignacionArreglo":31,"lstArreglo":32,"expresion":33,"accesoArreglo":34,":":35,"END":36,"BEGIN":37,"#":38,"lstDatos":39,"contenidoStruct":40,"declaracionStruct":41,"STRUCT":42,"{":43,"}":44,"declaracionStruct2":45,"asignacionStruct":46,".":47,"tipoOpCadena":48,"lstID2":49,"asignacionStruct2":50,"sentenciaIf":51,"si":52,"entonces":53,"entoncesSi":54,"IF":55,"entSi":56,"ELSE":57,"sentenciaSwitch":58,"SWITCH":59,"switchBlock":60,"decBlockGrup":61,"senDef":62,"decBlock":63,"switchLabel":64,"switchLab":65,"CASE":66,"DEFAULT":67,"sentenciaWhile":68,"WHILE":69,"sentenciaDoWhile":70,"DO":71,";":72,"sentenciaFor":73,"FOR":74,"IN":75,"sentenciaContinue":76,"CONTINUE":77,"sentenciaReturn":78,"RETURN":79,"sentenciaBreak":80,"BREAK":81,"opTernario":82,"?":83,"opCadena":84,"OFPOSITION":85,"SUBSTRING":86,"LENGTH":87,"TOUPPERCASE":88,"TOLOWERCASE":89,"PUSH":90,"POP":91,"declaracionFuncion":92,"lstParametros":93,"FUNCTION":94,"VOID":95,"MAIN":96,"parametro":97,"llamadaFuncion":98,"funcionesNativas":99,"PARSE":100,"TOINT":101,"TODOUBLE":102,"STRINGNAT":103,"TYPEOF":104,"incDecRemento":105,"++":106,"--":107,"&&":108,"&":109,"||":110,"!":111,"expresionrel":112,"==":113,"===":114,"!=":115,"<":116,">":117,"<=":118,">=":119,"+":120,"-":121,"*":122,"/":123,"^^":124,"%":125,"^":126,"SIN":127,"LOG10":128,"COS":129,"TAN":130,"SQRT":131,"DECIMAL":132,"NUMBER":133,"CARACTER":134,"CADENA":135,"NULL":136,"lstExp":137,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PRINT",10:"(",11:")",12:"PRINTLN",14:"DOUBLE",15:"INT",16:"STRING",17:"BOOLEAN",18:"CHAR",20:"ID",21:"=",23:",",28:"[",29:"]",35:":",36:"END",37:"BEGIN",38:"#",42:"STRUCT",43:"{",44:"}",47:".",55:"IF",57:"ELSE",59:"SWITCH",66:"CASE",67:"DEFAULT",69:"WHILE",71:"DO",72:";",74:"FOR",75:"IN",77:"CONTINUE",79:"RETURN",81:"BREAK",83:"?",85:"OFPOSITION",86:"SUBSTRING",87:"LENGTH",88:"TOUPPERCASE",89:"TOLOWERCASE",90:"PUSH",91:"POP",94:"FUNCTION",95:"VOID",96:"MAIN",100:"PARSE",101:"TOINT",102:"TODOUBLE",103:"STRINGNAT",104:"TYPEOF",106:"++",107:"--",108:"&&",109:"&",110:"||",111:"!",113:"==",114:"===",115:"!=",116:"<",117:">",118:"<=",119:">=",120:"+",121:"-",122:"*",123:"/",124:"^^",125:"%",126:"^",127:"SIN",128:"LOG10",129:"COS",130:"TAN",131:"SQRT",132:"DECIMAL",133:"NUMBER",134:"CARACTER",135:"CADENA",136:"NULL"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[8,4],[8,4],[13,1],[13,1],[13,1],[13,1],[13,1],[19,4],[19,2],[22,6],[22,4],[25,3],[24,3],[24,1],[26,4],[26,6],[26,6],[26,6],[31,3],[31,4],[27,3],[27,3],[34,6],[34,6],[34,6],[34,6],[34,4],[30,2],[30,2],[32,2],[32,1],[39,3],[39,3],[39,3],[39,1],[39,1],[39,1],[41,5],[45,2],[46,7],[46,6],[46,3],[46,5],[50,3],[40,1],[40,1],[40,1],[40,1],[49,3],[49,1],[51,1],[51,2],[51,2],[51,3],[52,7],[52,5],[54,2],[54,1],[56,8],[56,6],[53,4],[53,2],[58,5],[60,4],[60,3],[61,2],[61,1],[63,2],[64,2],[64,1],[65,3],[62,3],[62,2],[68,7],[70,9],[73,7],[76,1],[78,2],[80,1],[82,5],[84,3],[48,4],[48,6],[48,3],[48,3],[48,3],[48,4],[48,3],[92,8],[92,7],[92,8],[92,7],[92,8],[92,7],[92,7],[92,7],[93,3],[93,1],[97,2],[97,2],[97,4],[97,4],[98,4],[98,3],[99,6],[99,4],[99,4],[99,4],[99,4],[105,2],[105,2],[7,3],[7,3],[7,3],[7,2],[7,2],[7,1],[112,3],[112,3],[112,3],[112,3],[112,3],[112,3],[112,3],[112,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,3],[33,4],[33,4],[33,4],[33,4],[33,4],[33,5],[33,5],[33,5],[33,5],[33,5],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,2],[33,2],[137,3],[137,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

           return $$[$0-1];
        
break;
case 2:

            $$[$0-1].instruccion.push($$[$0]);
            this.$ = $$[$0-1];
        
break;
case 3:

            this.$ = { instruccion : [$$[$0]] };
        
break;
case 4:

                    this.$ = $$[$0];
            
break;
case 5:

                this.$ = {nombre:"sentPrint", expresion:$$[$0-1]};  
            
break;
case 6:

                this.$ = {nombre:"sentPrintln", expresion:$$[$0-1]};  
           
break;
case 7: case 8: case 9: case 10:

                  this.$ = $$[$0];
             
break;
case 11:

                  this.$ = $$[$0];     
             
break;
case 12:

                         this.$ = {nombre : "declaracion", tipo:$$[$0-3], id:$$[$0-2] , exp:$$[$0]};
                    
break;
case 13:

                          this.$ = {nombre : "declaracion2", tipo:$$[$0-1], id:$$[$0]};
                    
break;
case 14:

                         this.$ = {nombre : "declaracionLst", tipo:$$[$0-5], id:$$[$0-4], lstId:$$[$0-2] , exp:$$[$0]};
                    
break;
case 15:

                         this.$ = {nombre : "declaracionLst2", tipo:$$[$0-3], id:$$[$0-2], lstId:$$[$0]};   
                    
break;
case 16:

                        this.$ = {nombre : "asignacion", id:$$[$0-2], exp:$$[$0]};  
                   
break;
case 17: case 53: case 157:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 18: case 54:

            this.$ = [$$[$0]];
        
break;
case 19:

                        this.$ = {nombre : "declaracionArr", tipo:$$[$0-3], id:$$[$0-2] , arr:$$[$0]};
                    
break;
case 20:

                         this.$ = {nombre : "declaracionArr2", tipo:$$[$0-5], id:$$[$0-2] , arr:$$[$0]};
                    
break;
case 21:

                         this.$ = {nombre : "declaracionArr3", tipo:$$[$0-5], id:$$[$0-2] , arr:$$[$0]};
                    
break;
case 22:

                          this.$ = {nombre : "declaracionArr4", tipo:$$[$0-5], id:$$[$0-2] , exp:$$[$0]};
                    
break;
case 23:

                        this.$ = {nombre : "asignacionArr",  id:$$[$0-2] , arr:$$[$0]};
                  
break;
case 24:

                        this.$ = {nombre : "asignacionArr2", id:$$[$0-3], arr:$$[$0-2], exp:$$[$0] };
                  
break;
case 25: case 26:

                this.$ = $$[$0-2];
         
break;
case 27:

                this.$ = {nombre : "accesoArr", id:$$[$0-5], exp:$$[$0-3], exp2:$$[$0-1] };
              
break;
case 28:

                this.$ = {nombre : "accesoArrEnd", id:$$[$0-5], exp:$$[$0-3] };
             
break;
case 29:

                this.$ = {nombre : "accesoArrBegin", id:$$[$0-5], exp:$$[$0-1] };
             
break;
case 30:

                this.$ = {nombre : "accesoArrBeginEnd", id:$$[$0-5] };
             
break;
case 31:

                this.$ = {nombre : "accesoArr2", id:$$[$0-3], exp:$$[$0-1] };
             
break;
case 32:

                this.$ = {nombre : "copiaArr", id:$$[$0] };
             
break;
case 33:

                this.$ = {nombre : "copiaArr", id:$$[$0-1] };
             
break;
case 34:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
             
break;
case 35:

                this.$ = [$$[$0]];      
            
break;
case 36: case 37: case 38:

                $$[$0-2].push($$[$0]);
                this.$ = $$[$0-2];
          
break;
case 39: case 40: case 41:

                this.$ = [$$[$0]];
          
break;
case 42:

                        this.$ = {nombre : "declaracionStruct", id:$$[$0-3] , lstCont:$$[$0-1]};
                  
break;
case 43:

                      this.$ = {nombre : "declaracionStruct2", id:$$[$0-1] , id2:$$[$0]};
                  
break;
case 44:

                      this.$ = {nombre : "declaracionObj", padre:$$[$0-6], id:$$[$0-5] , padre2:$$[$0-3], lstExp:$$[$0-1] };
                  
break;
case 45:

                      this.$ = {nombre : "asignacionObj",  id:$$[$0-5] , padre:$$[$0-3], lstExp:$$[$0-1] };
                 
break;
case 46:

                     this.$ = {nombre : "asignacionObjCad",  id:$$[$0-2] , op:$$[$0] };
                 
break;
case 47:

                     this.$ = {nombre : "asignacionObjExp",  id:$$[$0-4] , lstID:$$[$0-2], exp:$$[$0] };
                 
break;
case 48:

                      this.$ = {nombre : "asignacionObjExp2",  id:$$[$0-2] , lstID:$$[$0]};  
                 
break;
case 49:

                    this.$ = $$[$0];
                 
break;
case 50: case 51: case 52:

                     this.$ = $$[$0];
                 
break;
case 55:

                this.$ = { nombre:"if_simple", sentIf:$$[$0] };
            
break;
case 56:

                this.$ = { nombre:"if_else", senIf:$$[$0-1], else:$$[$0] };
            
break;
case 57:

                this.$ = { nombre:"if_ifElse", senIf:$$[$0-1], senElseIf:$$[$0] };
            
break;
case 58:

                this.$ = { nombre:"if_extremo", senIf:$$[$0-2], senIfElse:$$[$0-1], senElse:$$[$0]};
            
break;
case 59:

         this.$ = { nombre:"if", expresion:$$[$0-4], instrucciones:$$[$0-1], tipo:0 };
     
break;
case 60:

        this.$ = { nombre:"if", expresion:$$[$0-2], instrucciones:$$[$0], tipo:0 };
    
break;
case 61: case 73:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 62:

                 this.$ = [$$[$0]];
            
break;
case 63:

           this.$ = { nombre:"elseif", expresion:$$[$0-4], instrucciones:$$[$0-1], tipo:0 };
        
break;
case 64:

          this.$ = { nombre:"elseif", expresion:$$[$0-2], instrucciones:$$[$0], tipo:0 };
      
break;
case 65:

            this.$ = { nombre:"else", instrucciones:$$[$0-1], tipo:0 };
        
break;
case 66:

            this.$ = { nombre:"else", instrucciones:$$[$0], tipo:0 };
         
break;
case 67:

                   this.$ ={ nombre:"sentenciaSwitch", expresion:$$[$0-2], cuerpoSwitch:$$[$0] }; 
                
break;
case 68:

                 this.$ ={ blockG:$$[$0-2], label:$$[$0-1] };
            
break;
case 69:

                 this.$ ={ blockG:$$[$0-1]};
            
break;
case 70:

                 $$[$0-1].push($$[$0]);
                 this.$ =$$[$0-1];
              
break;
case 71:

                 this.$ =[$$[$0]];
             
break;
case 72:

                this.$ = { tipoCaso:$$[$0-1], instrucciones:$$[$0] };
          
break;
case 74:

                this.$ = [$$[$0]];
            
break;
case 75:

                this.$ = { nombre:"case", expresion:$$[$0-1] };
           
break;
case 76:

                this.$ = { nombre:"defaultExp", instrucciones:$$[$0] };
          
break;
case 77:

                 this.$ = { nombre:"default" };
          
break;
case 78:

                   this.$ = { nombre:"sentenciaWhile", expresion:$$[$0-4], instrucciones:$$[$0-1] };
                
break;
case 79:

                   this.$ = { nombre:"sentenciaDoWhile", expresion:$$[$0-2], instrucciones:$$[$0-6] };
                
break;
case 80:

                this.$ = { nombre:"sentenciaFor", exp1:$$[$0-5], exp2:$$[$0-3], instrucciones:$$[$0-1] };
              
break;
case 81:

                    this.$ = {nombre:"sentenciaContinue"};
                  
break;
case 82:

                    this.$ = {nombre:"sentenciaReturn", exp:$$[$0] };
                
break;
case 83:

                   this.$= {nombre:"sentenciaBreak"};
               
break;
case 84:

                this.$ = { nombre:"ternario", exp1:$$[$0-4], exp2:$$[$0-2], exp3:$$[$0] };
            
break;
case 85:

            this.$ = {nombre : "operacionCad", id:$$[$0-2], op:$$[$0] };
          
break;
case 86:

                 this.$ = {nombre : "opCadOfPosition", exp:$$[$0-1] };
              
break;
case 87:

                 this.$ = {nombre : "opCadSubString", exp1:$$[$0-3], exp2:$$[$0-1] };
              
break;
case 88:

                  this.$ = {nombre : "opCadLength" };
              
break;
case 89:

                   this.$ = {nombre : "opCadUpper"};
              
break;
case 90:

                   this.$ = {nombre : "opCadLower" };
              
break;
case 91:

                   this.$ = {nombre : "opCadPush", exp:$$[$0-1] };
              
break;
case 92:

                   this.$ = {nombre : "opCadPop" };
              
break;
case 93:

                         this.$ = { nombre : "funcion", tipo:$$[$0-7], id:$$[$0-6], lstPar:$$[$0-4], lstInst:$$[$0-1] };
                    
break;
case 94:

                         this.$ = { nombre : "funcion2", tipo:$$[$0-6], id:$$[$0-5], lstInst:$$[$0-1] };
                    
break;
case 95:

                         this.$ = { nombre : "funcion3", id:$$[$0-6], lstPar:$$[$0-4], lstInst:$$[$0-1] };
                    
break;
case 96:

                        this.$ = { nombre : "funcion4", id:$$[$0-5], lstInst:$$[$0-1] };
                    
break;
case 97:

                        this.$ = { nombre : "funcion5", id:$$[$0-7], id:$$[$0-6], lstPar:$$[$0-4], lstInst:$$[$0-1] };
                    
break;
case 98:

                        this.$ = { nombre : "funcion6", id:$$[$0-6], id:$$[$0-5], lstInst:$$[$0-1] };
                    
break;
case 99:

                        this.$ = { nombre : "funcion7",  lstInst:$$[$0-1] };
                    
break;
case 100:

                        this.$ = { nombre : "funcion8", id:$$[$0-5], lstInst:$$[$0-1] };
                    
break;
case 101:

                 $$[$0-2].push($$[$0]);
                 this.$ = $$[$0-2];
              
break;
case 102:

                 this.$ = [$$[$0]];
              
break;
case 103:

                this.$ = { nombre : "declaracion2", tipo:$$[$0-1], id:$$[$0] };
           
break;
case 104:

                this.$ = { nombre : "declaracionStruct2", id:$$[$0-1], id2:$$[$0] };
           
break;
case 105:

                 this.$ = { nombre : "declaracionArr5", tipo:$$[$0-3], id:$$[$0] };
           
break;
case 106:

                this.$ = { nombre : "declaracion4", id:$$[$0-3], id2:$$[$0] };
           
break;
case 107:

                   this.$ = { nombre : "llamadaFuncion", id:$$[$0-3], lstPar:$$[$0-1] };  
                
break;
case 108:

                   this.$ = { nombre : "llamadaFuncion2", id:$$[$0-2] };  
               
break;
case 109:

                        this.$ = { nombre : "funNatParse", tipo:$$[$0-5], exp:$$[$0-1] };
                  
break;
case 110:

                        this.$ = { nombre : "funNatToInt", exp:$$[$0-1] };
                  
break;
case 111:

                        this.$ = { nombre : "funNatToDouble", exp:$$[$0-1] };
                  
break;
case 112:

                        this.$ = { nombre : "funNatToString", exp:$$[$0-1] };
                  
break;
case 113:

                        this.$ = { nombre : "funNatTypeOf", exp:$$[$0-1] };
                  
break;
case 114:

                this.$ = {nombre:"incremento", tipo:"incremento", id:$$[$0-1]};
              
break;
case 115:

                 this.$ = {nombre:"decremento", tipo:"decremento",id:$$[$0-1]};    
             
break;
case 116:

                this.$ = new Operacion($$[$0-2], $$[$0], Operacion.TipoOperacion.AND);
            
break;
case 117:

                this.$ = new Operacion($$[$0-2], $$[$0], Operacion.TipoOperacion.CONCATCAD);    
            
break;
case 118:

                //this.$ = { nombre : "expresion", tipo : $$[$0-1], op1: $$[$0-2], op2: $$[$0] };
                this.$ = new Operacion($$[$0-2], $$[$0], Operacion.TipoOperacion.OR);
            
break;
case 119:

                //this.$ = { nombre : "expresion", tipo:$$[$0-1], op1: $$[$0] };
                this.$ = new Operacion($$[$0-1], Operacion.TipoOperacion.NOT);
            
break;
case 120:

                this.$ = { tipo:"casteoId", id:$$[$0-1], exp:$$[$0] };
                this.$ = new Operacion($$[$0-1], Operacion.TipoOperacion.CASTEO);
            
break;
case 121: case 129:

                this.$ = $$[$0];
            
break;
case 122:

                //this.$ = { nombre : "expresion", tipo : $$[$0-1], op1: $$[$0-2], op2: $$[$0] };
                this.$ = new Operacion($$[$0-2], $$[$0], Operacion.TipoOperacion.IGUAL_QUE);
            
break;
case 123:

                //this.$ = { nombre : "expresion", tipo : $$[$0-1], op1: $$[$0-2], op2: $$[$0] };
                this.$ = new Operacion($$[$0-2], $$[$0], Operacion.TipoOperacion.TRIPLE_IGUAL_QUE);
            
break;
case 124:

                //this.$ = { nombre : "expresion", tipo : $$[$0-1], op1: $$[$0-2], op2: $$[$0] };
                this.$ = new Operacion($$[$0-2], $$[$0], Operacion.TipoOperacion.DIFERENTE_QUE);
            
break;
case 125:

                //this.$ = { nombre : "expresion", tipo : $$[$0-1], op1: $$[$0-2], op2: $$[$0] };
                this.$ = new Operacion($$[$0-2], $$[$0], Operacion.TipoOperacion.MENOR_QUE);

            
break;
case 126:

                //this.$ = { nombre : "expresion", tipo : $$[$0-1], op1: $$[$0-2], op2: $$[$0] };
                this.$ = new Operacion($$[$0-2], $$[$0], Operacion.TipoOperacion.MAYOR_QUE);
            
break;
case 127:

                //this.$ = { nombre : "expresion", tipo : $$[$0-1], op1: $$[$0-2], op2: $$[$0] };
                this.$ = new Operacion($$[$0-2], $$[$0], Operacion.TipoOperacion.MENOR_IGUAL_QUE);
            
break;
case 128:

                //this.$ = { nombre : "expresion", tipo : $$[$0-1], op1: $$[$0-2], op2: $$[$0] };
                this.$ = new Operacion($$[$0-2], $$[$0], Operacion.TipoOperacion.MAYOR_IGUAL_QUE);
            
break;
case 130: case 131: case 132: case 133: case 134: case 135: case 136:

                this.$ = { nombre : "expresion", tipo : $$[$0-1], op1: $$[$0-2], op2: $$[$0] };
            
break;
case 137:

                this.$ = {nombre : "expresion", tipo: "neg", op1: $$[$0] };
            
break;
case 138:

                this.$ = $$[$0-1];
            
break;
case 139:

                this.$ = { nombre:"funSin", exp:$$[$0-1] };
            
break;
case 140:

                this.$ = { nombre:"funLog", exp:$$[$0-1] };
            
break;
case 141:

                this.$ = { nombre:"funCos", exp:$$[$0-1] };
            
break;
case 142:

                this.$ = { nombre:"funTan", exp:$$[$0-1] };
            
break;
case 143:

                this.$ = { nombre:"funSQRT", exp:$$[$0-1] };
            
break;
case 144:

                this.$ = { nombre:"funSinNum", exp:$$[$0-1] };
            
break;
case 145:

                this.$ = { nombre:"funLogNum", exp:$$[$0-1] };
            
break;
case 146:

                this.$ = { nombre:"funCosNum", exp:$$[$0-1] };
            
break;
case 147:

                this.$ = { nombre:"funTanNum", exp:$$[$0-1] };
            
break;
case 148:

                this.$ = { nombre:"funSQRTNum", exp:$$[$0-1] };
            
break;
case 149:

                this.$ = {nombre : "expresion", tipo: "double", valor: $$[$0] };
            
break;
case 150:

                this.$ = {nombre : "expresion", tipo: "integer", valor: $$[$0] };
            
break;
case 151:

                this.$ = {nombre : "expresion", tipo: "char", valor: $$[$0] };
            
break;
case 152:

               this.$ = {nombre : "expresion", tipo: "string", valor: $$[$0] };     
            
break;
case 153:

                this.$ = {nombre : "expresion", tipo: "null", valor: $$[$0] };
            
break;
case 154:

                this.$ = {nombre : "expresion",  tipo: "id",  valor: $$[$0] };
            
break;
case 155:

                this.$ = {tipo: "incrementro", id:$$[$0-1]}
            
break;
case 156:

                this.$ ={ tipo:"decremento", id:$$[$0-1]};
            
break;
case 158:

            this.$ = [$$[$0]];    
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{1:[3]},{5:[1,21],6:22,7:4,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},o($Ve,[2,3]),o($Ve,[2,4],{108:$Vf,109:$Vg,110:$Vh}),{7:26,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},o([5,10,11,108,109,110,111,127,128,129,130,131,132,133,134,135,136],[2,129],{20:[1,27],113:[1,35],114:[1,36],115:[1,37],116:[1,38],117:[1,39],118:[1,40],119:[1,41],120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm,125:$Vn,126:$Vo}),o($Vp,[2,121]),{10:$V0,20:$V1,33:42,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{7:43,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:[1,44],38:[1,45]},{10:[1,46],38:[1,47]},{10:[1,48],38:[1,49]},{10:[1,50],38:[1,51]},{10:[1,52],38:[1,53]},o($Vq,[2,149]),o($Vq,[2,150]),o($Vq,[2,151]),o($Vq,[2,152]),o($Vq,[2,153]),o($Vq,[2,154],{106:[1,54],107:[1,55]}),{1:[2,1]},o($Ve,[2,2]),{7:56,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{7:57,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{7:58,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},o($Vr,[2,119],{108:$Vf,109:$Vg,110:$Vh}),o($Vp,[2,120]),{10:$V0,20:$V1,33:59,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:$V0,20:$V1,33:60,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:$V0,20:$V1,33:61,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:$V0,20:$V1,33:62,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:$V0,20:$V1,33:63,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:$V0,20:$V1,33:64,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:$V0,20:$V1,33:65,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:$V0,20:$V1,33:66,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:$V0,20:$V1,33:67,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:$V0,20:$V1,33:68,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:$V0,20:$V1,33:69,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:$V0,20:$V1,33:70,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:$V0,20:$V1,33:71,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:$V0,20:$V1,33:72,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},o([5,10,11,20,108,109,110,111,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,129,130,131,132,133,134,135,136],[2,137],{124:$Vm}),{11:[1,73],108:$Vf,109:$Vg,110:$Vh},{7:74,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:[1,75]},{7:76,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:[1,77]},{7:78,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:[1,79]},{7:80,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:[1,81]},{7:82,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:[1,83]},o($Vq,[2,155]),o($Vq,[2,156]),o($Vr,[2,116],{108:$Vf,109:$Vg,110:$Vh}),o($Vr,[2,117],{108:$Vf,109:$Vg,110:$Vh}),o($Vr,[2,118],{108:$Vf,109:$Vg,110:$Vh}),o($Vs,[2,130],{122:$Vk,123:$Vl,124:$Vm,125:$Vn,126:$Vo}),o($Vs,[2,131],{122:$Vk,123:$Vl,124:$Vm,125:$Vn,126:$Vo}),o($Vt,[2,132],{124:$Vm,125:$Vn,126:$Vo}),o($Vt,[2,133],{124:$Vm,125:$Vn,126:$Vo}),o([5,10,11,20,108,109,110,111,113,114,115,116,117,118,119,127,128,129,130,131,132,133,134,135,136],[2,134],{120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm,125:$Vn,126:$Vo}),o($Vu,[2,135],{124:$Vm,125:$Vn}),o($Vu,[2,136],{124:$Vm,125:$Vn}),o($Vv,[2,122],{120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm,125:$Vn,126:$Vo}),o($Vv,[2,123],{120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm,125:$Vn,126:$Vo}),o($Vv,[2,124],{120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm,125:$Vn,126:$Vo}),o($Vv,[2,125],{120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm,125:$Vn,126:$Vo}),o($Vv,[2,126],{120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm,125:$Vn,126:$Vo}),o($Vv,[2,127],{120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm,125:$Vn,126:$Vo}),o($Vv,[2,128],{120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm,125:$Vn,126:$Vo}),o($Vq,[2,138]),{11:[1,84],108:$Vf,109:$Vg,110:$Vh},{7:85,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{11:[1,86],108:$Vf,109:$Vg,110:$Vh},{7:87,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{11:[1,88],108:$Vf,109:$Vg,110:$Vh},{7:89,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{11:[1,90],108:$Vf,109:$Vg,110:$Vh},{7:91,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{11:[1,92],108:$Vf,109:$Vg,110:$Vh},{7:93,10:$V0,20:$V1,33:6,111:$V2,112:7,121:$V3,127:$V4,128:$V5,129:$V6,130:$V7,131:$V8,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},o($Vq,[2,139]),{11:[1,94],108:$Vf,109:$Vg,110:$Vh},o($Vq,[2,140]),{11:[1,95],108:$Vf,109:$Vg,110:$Vh},o($Vq,[2,141]),{11:[1,96],108:$Vf,109:$Vg,110:$Vh},o($Vq,[2,142]),{11:[1,97],108:$Vf,109:$Vg,110:$Vh},o($Vq,[2,143]),{11:[1,98],108:$Vf,109:$Vg,110:$Vh},o($Vq,[2,144]),o($Vq,[2,145]),o($Vq,[2,146]),o($Vq,[2,147]),o($Vq,[2,148])],
defaultActions: {21:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/*comentario lineal*/ 
break;
case 2:/*comentario multilineal*/
break;
case 3:return 132
break;
case 4:return 133
break;
case 5:return 134
break;
case 6:return 135
break;
case 7:return 122;
break;
case 8:return 47;
break;
case 9:return 123;
break;
case 10:return 106;
break;
case 11:return 107;
break;
case 12:return 121;
break;
case 13:return 120;
break;
case 14:return 126;
break;
case 15:return 125;
break;
case 16:return 10;
break;
case 17:return 11;
break;
case 18:return 72;
break;
case 19:return 35;
break;
case 20:return 28;
break;
case 21:return 29;
break;
case 22:return 43;
break;
case 23:return 44;
break;
case 24:return 23;
break;
case 25:return 114
break;
case 26:return 113
break;
case 27:return 21;
break;
case 28:return 115
break;
case 29:return 118
break;
case 30:return 119
break;
case 31:return 116
break;
case 32:return 117
break;
case 33:return 110
break;
case 34:return 108
break;
case 35:return 109
break;
case 36:return '|&'
break;
case 37:return 111
break;
case 38:return 21
break;
case 39:return '$'
break;
case 40:return 111;
break;
case 41:return 83;
break;
case 42:return 38;
break;
case 43:return 136
break;
case 44:return 15
break;
case 45:return 14
break;
case 46:return 17
break;
case 47:return 16
break;
case 48:return 18
break;
case 49:return 101
break;
case 50:return 102
break;
case 51:return 104
break;
case 52:return 103
break;
case 53:return 9;
break;
case 54:return 12;
break;
case 55:return 55
break;
case 56:return 57
break;
case 57:return 59
break;
case 58:return 66
break;
case 59:return 67
break;
case 60:return 81
break;
case 61:return 77
break;
case 62:return 79
break;
case 63:return 42
break;
case 64:return 74
break;
case 65:return 69
break;
case 66:return 127
break;
case 67:return 128
break;
case 68:return 129
break;
case 69:return 130
break;
case 70:return 131
break;
case 71:return 85
break;
case 72:return 86
break;
case 73:return 87
break;
case 74:return "TOUPPERCASE"
break;
case 75:return "TOLOWERCASE"
break;
case 76:return "PARSE"
break;
case 77:return "PUSH"
break;
case 78:return "POP"
break;
case 79:return "MAIN"
break;
case 80:return "VOID"
break;
case 81:return "DO"
break;
case 82:return "FUNCTION"
break;
case 83:return "IN"
break;
case 84:return "BEGIN"
break;
case 85:return "END"
break;
case 86:return 20
break;
case 87:return 5;
break;
case 88:return 'INVALID';
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]*)/,/^(?:\/\*[^"\/#"]*\*\/)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:'[^"'"]')/,/^(?:"[^"\""]*")/,/^(?:\*)/,/^(?:\.)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:===)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|&)/,/^(?:!)/,/^(?:=)/,/^(?:\$)/,/^(?:!)/,/^(?:\?)/,/^(?:#)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:typeof\b)/,/^(?:string\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:struct\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:sin\b)/,/^(?:log10\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:sqrt\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:parse\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:main\b)/,/^(?:void\b)/,/^(?:do\b)/,/^(?:function\b)/,/^(?:in\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:((_[A-Za-z])|[A-Za-z])([A-Za-z0-9]|_)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaArbol;
exports.Parser = gramaticaArbol.Parser;
exports.parse = function () { return gramaticaArbol.parse.apply(gramaticaArbol, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}